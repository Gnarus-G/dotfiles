;; (include "./todos.yuck")

(defwidget bar [index]
  (box :orientation "h" :class "bar"
    (workspaces :index index)
    ;; (box :orientation "h" :visible {!todos_empty} :space-evenly false :halign "center"
    ;;  (button :onclick 'leftwm command "ToggleScratchPad todos"' "ðŸ“œ")
     ;; (todo :item latest_todo))
    (sidestuff)))

(defwidget system-stats []
  (box :class "system-stats" :orientation "h" :space-evenly false
    ;; CPU Metric
    (box :class "px border-x system-metric cpu-metric ${round(EWW_CPU.avg,0) >= 80 ? 'metric-critical' : round(EWW_CPU.avg,0) >= 50 ? 'metric-warning' : 'metric-normal'}" :space-evenly false 
         (label :class "metric-label" :text "CPU:")
         (label :class "metric-value cpu-value ${round(EWW_CPU.avg,0) >= 80 ? 'value-critical' : round(EWW_CPU.avg,0) >= 50 ? 'value-warning' : 'value-normal'}" :text "${round(EWW_CPU.avg,0)}%"))
    
    ;; RAM Metric
    (box :class "px border-x system-metric ram-metric ${round(EWW_RAM.used_mem_perc,0) >= 85 ? 'metric-critical' : round(EWW_RAM.used_mem_perc,0) >= 60 ? 'metric-warning' : 'metric-normal'}" :space-evenly false 
         (label :class "metric-label" :text "RAM:")
         (label :class "metric-value ram-value ${round(EWW_RAM.used_mem_perc,0) >= 85 ? 'value-critical' : round(EWW_RAM.used_mem_perc,0) >= 60 ? 'value-warning' : 'value-normal'}" :text "${round(EWW_RAM.used_mem_perc,0)}%"))
    
    ;; Disk Metric
    (box :class "px border-x system-metric disk-metric ${round(EWW_DISK["/"].used_perc,0) >= 90 ? 'metric-critical' : round(EWW_DISK["/"].used_perc,0) >= 70 ? 'metric-warning' : 'metric-normal'}" :space-evenly false 
         (label :class "metric-label" :text "DISK:")
         (label :class "metric-value disk-value ${round(EWW_DISK["/"].used_perc,0) >= 90 ? 'value-critical' : round(EWW_DISK["/"].used_perc,0) >= 70 ? 'value-warning' : 'value-normal'}" :text "${round(EWW_DISK["/"].used_perc,0)}%"))
    
    ;; Battery - only show if exists
    (box :class "px border-x system-metric battery-metric" :space-evenly false 
         :visible has_battery
         (label :class "metric-label" :text "BAT:")
         (label :class "metric-value battery-value ${EWW_BATTERY.BAT0.capacity < 20 ? 'value-critical' : EWW_BATTERY.BAT0.capacity < 40 ? 'value-warning' : 'value-normal'}" 
                :text "${EWW_BATTERY.BAT0.status == 'Charging' ? 'ðŸ”Œ' : EWW_BATTERY.BAT0.capacity < 20 ? 'ðŸª«' : EWW_BATTERY.BAT0.capacity < 50 ? 'ðŸ”‹' : 'ðŸ”‹'} ${EWW_BATTERY.BAT0.capacity}%"))
    
    ;; Network Metric
    (box :class "px border-x system-metric net-metric" :space-evenly false 
         (label :class "metric-label" :text "NET:")
         (label :class "net-up" :text "â†‘${round(EWW_NET[net_interface].NET_UP / 1024, 1)}KB/s")
         (label :class "net-down" :text "â†“${round(EWW_NET[net_interface].NET_DOWN / 1024, 1)}KB/s"))))

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (toggle_audio_icon_button)
    (metric :value volume
            :onchange "pamixer --set-volume {}")
    (box :class "px border-x" :space-evenly false ip_address)
    (system-stats)
   (box :class "border-r px today" 
    (eventbox :onclick "${EWW_CMD} ${cal_is_open ? "close" : "open"} cal; ${EWW_CMD} update cal_is_open=${!cal_is_open}; " today))
   (box :style "padding-left: 10px;" time)))

(defpoll has_battery :interval "10s"
  "test -e /sys/class/power_supply/BAT0 && echo true || echo false")

(defwidget volume-control []
  (box :class "volume-control ${volume_muted ? 'volume-muted' : volume >= 70 ? 'volume-high' : volume >= 30 ? 'volume-medium' : 'volume-low'}" 
       :orientation "h" 
       :space-evenly false
    ;; Volume icon button
    (button :class "volume-icon-btn ${volume_muted ? 'muted' : ''}" 
            :onclick 'pamixer -t'
            :tooltip "Click to ${volume_muted ? 'unmute' : 'mute'}"
            {volume_muted ? "ðŸ”‡" : volume < 30 ? "ðŸ”ˆ" : volume < 70 ? "ðŸ”‰" : "ðŸ”Š"})
    ;; Volume percentage display
    (label :class "volume-text ${volume_muted ? 'text-muted' : volume >= 70 ? 'text-high' : volume >= 30 ? 'text-medium' : 'text-low'}" 
           :text "${volume_muted ? 'MUTE' : '${volume}%'}")))

(defwidget toggle_audio_icon_button [] 
  (volume-control))

(defwidget workspaces [index]
    (box :class "workspaces"
         :orientation "h"
         :space-evenly true
         :halign "start"
         :height 30
         :spacing 10
      (box
        (for tag in '${wmstate.workspaces[index].tags}'
          (button
            :width 25
            :valign "center" 
            :halign "center"
            :class {tag.mine ? "ws-button-mine" :
                    tag.visible ? "ws-button-visible" :
                    tag.urgent ? "ws-button-urgent" :
                    tag.busy ? "ws-button-busy" : ""}
            :onclick "leftwm-command \"SendWorkspaceToTag ${index} ${tag.index}\""
            {!tag.mine && !tag.busy && !tag.visible && !tag.urgent ?  "Â·" : "${tag.name}"})))
     (label :class "text-bg-light" :text "Layout: ${wmstate.workspaces[index].layout}")))
      

(defwidget metric [value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))



(defpoll volume :interval "200ms"
  "pamixer --get-volume")

(defpoll volume_muted :interval "100ms"
  "pamixer --get-mute")

(defpoll ip_address :interval "60s" :initial "N/A"
  "ip route get 1.1.1.1 2>/dev/null | awk '{print $7}' || echo 'N/A'")

(defpoll net_interface :interval "60s" :initial "N/A"
  "ip route get 1.1.1.1 2>/dev/null | awk '{print $5}' || echo 'N/A'")

(defpoll today :interval "1s"
  "date '+%a, %b %d'")

(defpoll time :interval "1s"
  "date '+%l:%M %p'")

(deflisten wmstate 
           :initial '{"workspaces":[{"layout":"","tags":[{"name":"","index":0,"mine":false,"busy":false,"visible":false,"urgent":false}]}]}'
           "leftwm state")

(defvar cal_is_open false)

(defwindow cal
  :monitor 0
  :stacking "fg"
  :wm-ignore true
  :windowtype "dock"
  :geometry (geometry :x "-1%" :y "3%" :anchor "top right")
   (calendar :class "calendar"))

(defwindow bar [monitor_id ?y_offset ?reserve_distance]
  :monitor monitor_id
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y { y_offset ?: "10px"}
                      :width "99%"
                      :height "10px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance { reserve_distance ?: "35px" })
  (bar :index monitor_id))
