(include "./todos.yuck")

(defwidget bar [index]
  (box :orientation "h" :class "bar"
    (workspaces :index index)
    (box :orientation "h" :visible {!todos_empty} :space-evenly false :halign "center"
     (button :onclick '${EWW_CMD} windows | grep "\*todo_list" && ${EWW_CMD} close todo_list || ${EWW_CMD} open todo_list' "ðŸ“œ")
     (todo :item latest_todo))
    (sidestuff)))

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (metric :label "ðŸ”Š"
            :value volume
            :onchange "amixer -D pulse sset Master {}%")
    (box :class "px border-x" :space-evenly false "CPU:" {round(EWW_CPU.avg,0)} "%")
    (box :class "px border-r" :space-evenly false "RAM:" {round(EWW_RAM.used_mem_perc,0)} "%")
   (box :class "border-r px today" 
    (eventbox :onclick "${EWW_CMD} ${cal_is_open ? "close" : "open"} cal; ${EWW_CMD} update cal_is_open=${!cal_is_open}; " today))
   (box :style "padding-left: 10px;" time)))

(defwidget workspaces [index]
    (box :class "workspaces"
         :orientation "h"
         :space-evenly true
         :halign "start"
         :height 30
         :spacing 10
      (box
        (for tag in '${wmstate.workspaces[index].tags}'
          (button
            :width 25
            :valign "center" 
            :halign "center"
            :class {tag.mine ? "ws-button-mine" :
                    tag.visible ? "ws-button-visible" :
                    tag.urgent ? "ws-button-urgent" :
                    tag.busy ? "ws-button-busy" : ""}
            :onclick "leftwm-command \"SendWorkspaceToTag ${index} ${tag.index}\""
            {!tag.mine && !tag.busy && !tag.visible && !tag.urgent ?  "Â·" : "${tag.name}"})))
     (label :class "text-bg-light" :text "Layout: ${wmstate.workspaces[index].layout}")))
      

(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))



(defpoll volume :interval "1s"
  "scripts/getvol")

(defpoll today :interval "1s"
  "date '+%a, %b %d'")

(defpoll time :interval "1s"
  "date '+%l:%M %p'")

(deflisten wmstate 
           :initial '{"workspaces":[{"layout":"","tags":[{"name":"","index":0,"mine":false,"busy":false,"visible":false,"urgent":false}]}]}'
           "leftwm state")

(defvar cal_is_open false)

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0.25%"
                      :width "99%"
                      :height "10px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "2%")
  (bar :index 0))

(defwindow bar1
  :monitor 1
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0.25%"
                      :width "99%"
                      :height "10px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "2.5%")
  (bar :index 1))

(defwindow bar2
  :monitor 2
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0.25%"
                      :width "99%"
                      :height "10px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "2.5%")
  (bar :index 2))

(defwindow cal
  :monitor 0
  :stacking "fg"
  :wm-ignore true
  :windowtype "dock"
  :geometry (geometry :x "-1%" :y "3%" :anchor "top right")
   (calendar :class "calendar"))
